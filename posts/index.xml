<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on moco</title>
        <link>https://kywk.github.io/moco/posts/</link>
        <description>Recent content in Posts on moco</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Thu, 10 Dec 2020 17:31:07 +0800</lastBuildDate>
        <atom:link href="https://kywk.github.io/moco/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Tar 加密打包語法</title>
            <link>https://kywk.github.io/moco/posts/2020/12/cli_encrypt-tarball/</link>
            <pubDate>Thu, 10 Dec 2020 17:31:07 +0800</pubDate>
            
            <guid>https://kywk.github.io/moco/posts/2020/12/cli_encrypt-tarball/</guid>
            <description>網路上免費創建團隊硬碟理論上創建者是團隊硬碟管理員, 但實際上所有的團隊硬碟仍受 Google GSuite / Workspace 機構管理員管轄. 機構管理員雖然無法直接存取檔案, 但有權將檔案擁有者轉移給他人. 如果只是存放網路上載來的資源就算了, 若是存放個人檔案, 仍建議加密壓縮.
TarBall Tar 支援 gzip, bz2, xz&amp;hellip; 等多種壓縮方式, 但 tar 並不支援加密. 在命令列模式下要加密 tarball, 需透過其他指令來完成, 最常用的是 openssl.
加密 簡單指令如下: (僅加密打包不壓縮)
$ tar cvf - FILE_NAME | openssl des3 -salt -k passw0rd -out /path/to/file.tar 這個指令主要分成兩部分
第一部分是 tar cvf - FILE_NAME, 意思是針對 FILE_NAME 進行打包, 其中三個參數的意思是:
 c: create 創建一個新的 tarball 文件 v: verbose 輸出詳細的處理過程 f:file 需要打包的檔案 (Unix 下一切都是檔案, 資料夾也屬於檔案)  第二部分是 openssl des3 -salt -k passw0rd -out /path/to/file.</description>
            <content type="html"><![CDATA[<p>網路上免費創建團隊硬碟理論上創建者是團隊硬碟管理員,
但實際上所有的團隊硬碟仍受 Google GSuite / Workspace 機構管理員管轄.
機構管理員雖然無法直接存取檔案, 但有權將檔案擁有者轉移給他人.
如果只是存放網路上載來的資源就算了, 若是存放個人檔案, 仍建議加密壓縮.</p>
<h2 id="tarball">TarBall</h2>
<p>Tar 支援 gzip, bz2, xz&hellip; 等多種壓縮方式, 但 tar 並不支援加密.
在命令列模式下要加密 tarball, 需透過其他指令來完成, 最常用的是 openssl.</p>
<h3 id="加密">加密</h3>
<p>簡單指令如下: (僅加密打包不壓縮)</p>
<pre><code>$ tar cvf - FILE_NAME | openssl des3 -salt -k passw0rd -out /path/to/file.tar
</code></pre><p>這個指令主要分成兩部分</p>
<p>第一部分是 <code>tar cvf - FILE_NAME</code>, 意思是針對 FILE_NAME 進行打包,
其中三個參數的意思是:</p>
<ul>
<li>c: create 創建一個新的 tarball 文件</li>
<li>v: verbose 輸出詳細的處理過程</li>
<li>f:file 需要打包的檔案 (Unix 下一切都是檔案, 資料夾也屬於檔案)</li>
</ul>
<p>第二部分是 <code>openssl des3 -salt -k passw0rd -out /path/to/file.tar</code>
意思是針對文件透過 des3 加密, 其中參數的意思是:</p>
<ul>
<li>des3 指定用來加密的演算法, 常見有三種 des, des3, idea</li>
<li>salt 為密碼添加一個隨機數, 和 <code>-k</code> 一起使用, 可防範字典攻擊</li>
<li>k 指定的密碼</li>
<li>out 輸出文件名字</li>
</ul>
<h3 id="解密">解密</h3>
<pre><code>$ openssl des3 -d -k passw0rd -salt -in /path/to/file.tar.gz | tar xvf -
</code></pre><p>這指令剛好把加密打包的行為反過來. 先透過 openssl 把檔案解密後, 再利用 tar 解開 tarball 內容.</p>
<h3 id="alias">alias</h3>
<p>整理資料時需大量的打包檔案, 未避免輸入時手誤打錯密碼,
直接在 bashrc 中新增加密和解密的 alias, 把密碼固定寫在 alias 中,
這樣加密打包時無須輸入一長串命令, 也不用擔心手誤 key 錯密碼.</p>
<pre><code class="language-sh.rc" data-lang="sh.rc">alias ens='openssl des3 -salt -k passw0rd '
alias des='openssl des3 -d -salt -k passw0rd '
</code></pre><pre><code># 加密打包
$ tar cvf - FILE_NAME | ens -out FILE_NAME.tar.x
# 解密
$ des -in FILE_NAME.tar.x | tar xvf -
</code></pre><h2 id="see-also">See Also</h2>
<h3 id="reference">Reference</h3>
<ul>
<li><a href="http://note.drx.tw/2008/04/command.html">GNU / Linux 各種壓縮與解壓縮指令 | 凍仁的筆記</a></li>
<li><a href="https://www.itread01.com/content/1551377067.html">tar命令加密壓縮 - IT閱讀</a></li>
<li><a href="https://www.itread01.com/content/1547949421.html">Linux tar加密壓縮解壓 - IT閱讀</a></li>
<li><a href="http://blog.changyy.org/2014/06/linux-openssl-des3-ubuntu-1404.html">第二十四個夏天後: [Linux] 使用 Openssl 做簡易的(DES3)加密、解密 @ Ubuntu 14.04</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Setup Rclone for Google Team Drive on macOS</title>
            <link>https://kywk.github.io/moco/posts/2020/12/gd_rclone-config/</link>
            <pubDate>Mon, 07 Dec 2020 17:35:35 +0800</pubDate>
            
            <guid>https://kywk.github.io/moco/posts/2020/12/gd_rclone-config/</guid>
            <description>針對 Google Drive 個人與商業用戶, Google 分別提供了 Backup and Sync 以及 DriveFS 兩個桌面軟體以便操作, 但無論是 Backup and Sync 還是 DriveFS 都不支援 Team Drive, 無法在桌面環境下操作 Team Drive, 只能透過網頁端處理.
所幸萬能的 Rclone 有支援 Team Drive. Rclone Rclone 是一個非常好用的雲端硬碟管理工具, 在命令模式下直接針對多數雲端硬碟服務進行操作, 搭配其他系統工具, 可自動化雲端硬碟的管理, 包括異地備份, 打包, 移除老舊檔案&amp;hellip; 等等.
目前 Rclone 支援的雲端硬碟服務多達 38 種, 其中本篇的重點在第 13 項 &amp;ldquo;Google Drive&amp;rdquo;.
注意: 第 12 項的 Google Cloud Storage 並不是 Google Drive, 而是 GCP 中類似 AWS S3 的服務.
Install rclone on macOS 在 macOS 透過 homebrew 安裝的 rclone 目前不支援 mount 命令.</description>
            <content type="html"><![CDATA[<p>針對 Google Drive 個人與商業用戶, Google 分別提供了 Backup and Sync 以及 DriveFS 兩個桌面軟體以便操作,
但無論是 Backup and Sync 還是 DriveFS 都不支援 Team Drive,
無法在桌面環境下操作 Team Drive, 只能透過網頁端處理.</p>
<p>所幸萬能的 Rclone 有支援 Team Drive.  </p>
<h2 id="rclonehttpsrcloneorg"><a href="https://rclone.org/">Rclone</a></h2>
<p>Rclone 是一個非常好用的雲端硬碟管理工具, 在命令模式下直接針對多數雲端硬碟服務進行操作,
搭配其他系統工具, 可自動化雲端硬碟的管理, 包括異地備份, 打包, 移除老舊檔案&hellip; 等等.</p>
<p>目前 Rclone 支援的雲端硬碟服務多達 38 種, 其中本篇的重點在第 13 項 &ldquo;Google Drive&rdquo;.</p>
<p><strong>注意:</strong> 第 12 項的 Google Cloud Storage 並不是 Google Drive, 而是 GCP 中類似 AWS S3 的服務.</p>
<h2 id="install-rclone-on-macos">Install rclone on macOS</h2>
<p>在 macOS 透過 homebrew 安裝的 rclone 目前不支援 mount 命令.
不過目前我的使用情境還不需要 mount 遠端硬碟, 所以無腦使用 Homebrew 安裝:</p>
<pre><code>$ brew install rclone

Homebrew's installation does not include the `mount` subcommand on MacOS.

zsh completions have been installed to:
  /usr/local/share/zsh/site-functions

/usr/local/share/zsh/site-functions is not in your zsh FPATH!
Add it by following these steps:
  https://docs.brew.sh/Shell-Completion#configuring-completions-in-zsh
</code></pre><h3 id="zsh-auto-completion">zsh auto completion</h3>
<h2 id="configure-team-drive">Configure team drive</h2>
<p>透過 brew 安裝 rclone 通常不會出錯, 安裝完後可以準備進行設定.
輸入 <code>rclone config</code> 後會進入設定模式.</p>
<pre><code>$ rclone config

e) Edit existing remote
n) New remote
d) Delete remote
r) Rename remote
c) Copy remote
s) Set configuration password
q) Quit config
e/n/d/r/c/s/q&gt;  n 
name&gt;  it-if-bimgo 
</code></pre><p>先選擇 <code>n</code> 新增一組遠端硬碟, 取個自己喜歡且方便辨識的名稱</p>
<pre><code>Type of storage to configure.
Enter a string value. Press Enter for the default (&quot;&quot;).
Choose a number from below, or type in your own value
...
11 / FTP Connection
   \ &quot;ftp&quot;
12 / Google Cloud Storage (this is not Google Drive)
   \ &quot;google cloud storage&quot;
13 / Google Drive
   \ &quot;drive&quot;
14 / Google Photos
   \ &quot;google photos&quot;
 ...   
Storage&gt; 13
</code></pre><p>接著要選擇遠端硬碟的類型, 這篇介紹的是 Google Drive, 選 13.</p>
<pre><code>** See help for drive backend at: https://rclone.org/drive/ **

Google Application Client Id
Setting your own is recommended.
See https://rclone.org/drive/#making-your-own-client-id for how to create your own.
If you leave this blank, it will use an internal key which is low performance.
Enter a string value. Press Enter for the default (&quot;&quot;).
client_id&gt; 9847344-xxx-xxx-xxx
OAuth Client Secret
Leave blank normally.
Enter a string value. Press Enter for the default (&quot;&quot;).
client_secret&gt; a6AZxxxxxxxx
</code></pre><p>依循 <a href="https://rclone.org/drive/#making-your-own-client-id">Google drive | rclone</a> 的說明,
申請 Google Drive API 以及 App client_id 和 client_secret, 填入.
不知道如何申請也可留空, 不過指令執行效率會較差.</p>
<pre><code>Scope that rclone should use when requesting access from drive.
Enter a string value. Press Enter for the default (&quot;&quot;).
Choose a number from below, or type in your own value
 1 / Full access all files, excluding Application Data Folder.
   \ &quot;drive&quot;
 2 / Read-only access to file metadata and file contents.
   \ &quot;drive.readonly&quot;
   / Access to files created by rclone only.
 3 | These are visible in the drive website.
   | File authorization is revoked when the user deauthorizes the app.
   \ &quot;drive.file&quot;
   / Allows read and write access to the Application Data folder.
 4 | This is not visible in the drive website.
   \ &quot;drive.appfolder&quot;
   / Allows read-only access to file metadata but
 5 | does not allow any access to read or download file content.
   \ &quot;drive.metadata.readonly&quot;
scope&gt; 1
</code></pre><p>接著選擇這個 Remote 的存取權限, 通常選 1, 完整存取的權限.</p>
<pre><code>ID of the root folder
Leave blank normally.

Fill in to access &quot;Computers&quot; folders (see docs), or for rclone to use
a non root folder as its starting point.

Enter a string value. Press Enter for the default (&quot;&quot;).
root_folder_id&gt;
</code></pre><p>設定預設根目錄的 ID. 以團隊碟來說留空即可.</p>
<pre><code>Service Account Credentials JSON file path
Leave blank normally.
Needed only if you want use SA instead of interactive login.

Leading `~` will be expanded in the file name as will environment variables such as `${RCLONE_CONFIG_DIR}`.

Enter a string value. Press Enter for the default (&quot;&quot;).
service_account_file&gt;
</code></pre><p>Service Account 將在後篇介紹, 這邊先留空即可</p>
<pre><code>Edit advanced config? (y/n)
y) Yes
n) No (default)
y/n&gt; n
Remote config
Use auto config?
 * Say Y if not sure
 * Say N if you are working on a remote or headless machine
y) Yes (default)
n) No
y/n&gt;
If your browser doesn't open automatically go to the following link: http://127.0.0.1:53682/auth?state=qQkpxmh1iDjj0kmwp4weGw
Log in and authorize rclone for access
Waiting for code...
</code></pre><p>進階設定和自動設定都直接按 Enter 以預設值即可, 接著會自動打開網頁, 需要網站上同意 rclone 存取 Google Drive.</p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3ecAsml5AprwhfVG3ZFgUqwPlOzVd5imrLPKzUTeQPTGusvxLr556E5_SKQTvPwhyM1i14luzwrycNlSaEncdDfdT7HP8x6siJlsHkMZUz30KAqtMSttstvpJO_ysjLgL-BttXGvvdxbiwFfkcuOt1iZA=w469-h624-no?authuser=0" alt=""></p>
<pre><code>Log in and authorize rclone for access
Waiting for code...
Got code
Configure this as a team drive?
y) Yes
n) No (default) 
y/n&gt; y
Fetching team drive list...
Choose a number from below, or type in your own value
 1 / if.bimgo
   \ &quot;0AMxxxxxxxxxxxxxxxx&quot;
 2 / i.bimgo
   \ &quot;0APxxxxxxxxxxxxxxxx&quot;
 3 / i.hcc
   \ &quot;0AHxxxxxxxxxxxxxxxx&quot;
 4 / i.vip
   \ &quot;0AHxxxxxxxxxxxxxxxx&quot;
Enter a Team Drive ID&gt; 1
</code></pre><p>網頁授權成功後, rclone 會詢問這組 remote 是否為 team drive, 選 y.
此時 rclone 會自動抓取所有的團隊硬碟, 選擇所要對應的團隊硬碟.</p>
<pre><code>--------------------
[it-if-bimgo]
type = drive
client_id = 9847344-xxx-xxx-xxx
client_secret = a6AZxxxxxxxx
scope = drive
token = {xxxxxx}
team_drive = 0AMxxxxxxxxxxxxxxxx
root_folder_id =
--------------------
y) Yes this is OK (default)
e) Edit this remote
d) Delete this remote
y/e/d&gt; y
</code></pre><p>最後再確認上述資訊是否正確, 若無誤選 y 保存. rclone 就設定完成了.</p>
<h3 id="test">Test</h3>
<pre><code>$ rclone mkdir it-if-bimgo:Test                                                    915  2.29    17:25:45 
$ rclone lsd it-if-bimgo:                                                          917  2.31    17:26:04 
          -1 2020-12-08 17:25:56        -1 Test
</code></pre><p>測試方式很簡單, 先透過 rclone mkdir 建立一個空資料夾,
再透過 rclone lsd 確認該資料夾是否存在.
亦可開網頁確認:</p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3cNRVBXgzQV003vslOd5Ms4tIA_w_VcT6Z-6t_vm4BMxy-cDnDETos5QyNXCpNnONFWp5uNhpw046yRyNwmTchdaNY5QttX3IiYhb8Ve8bBlPEgK0Nhx5P15WXEmoUgofpudjZYTLwYhLXXdgZ6N-nEfw=w545-h148-no?authuser=0" alt=""></p>
<p>這篇文章有更多 rclone 常用指令的介紹: <a href="http://jdev.tw/blog/4746/rclone-cloud-storage-command-line">用rclone命令行指令簡化雲端儲存服務的各項檔案操作 | 簡睿隨筆 | 學習過程的紀錄與備忘</a></p>
<h3 id="drive-server-side-across">drive-server-side-across</h3>
<p>Rclone 在 Google 雲端硬碟有支援一項<a href="https://rclone.org/drive/#drive-server-side-across-configs">特殊的設定</a>, 可以直接在伺服器端進行傳輸:</p>











  





  


<blockquote>
  <p><p>&ndash;drive-server-side-across-configs<br>
Allow server side operations (eg copy) to work across different drive configs.<br>
This can be useful if you wish to do a server side copy between two different Google drives. Note that this isn’t enabled by default because it isn’t easy to tell if it will work between any two configurations.</p>
<ul>
<li>Config: server_side_across_configs</li>
<li>Env Var: RCLONE_DRIVE_SERVER_SIDE_ACROSS_CONFIGS</li>
<li>Type: bool</li>
<li>Default: false</li>
</ul>
</p>
  <footer>
    <strong></strong>
    
      
        
      
    
  </footer>
</blockquote>

<p>編輯 <code>~/.config/rclone/rclone.conf</code>,
加入 <code>server_side_across_configs = true</code></p>
<pre><code>[google-personal-drive]
type = drive
scope = drive
server_side_across_configs = true
token = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
root_folder_id = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

[google-team-drive]
type = drive
scope = drive
server_side_across_configs = true
token = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
team_drive = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</code></pre><p>接著進行傳輸, 同時透過 iftop 觀察網路頻寬.
可以發現到 rclone 回報的速度數百 MBps 左右, 但是 iftop 回報的流量只有數十 kbps.
代表成功的直接在伺服器端進行傳輸, 而不消耗本機頻寬, 速度快多了.</p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3fSS4nQZkkvujw8YtBCcYlw8sgyp9Xtc5f_fBKrsc96NMsTWCtAp8nRjho0i7uoj7f8kJOBaDDNbA7W4h3k3uJ8aTOD908TfYTZlmFflQXwyU7oLsE96ChT13uc0a48h2do9s6GdhdcsHgnFcbodSmriQ=w730-h588-no?authuser=0" alt=""></p>
<p><strong>伺服器端檔案傳輸僅限於同一帳戶下的不同資料夾 (包含共享硬碟), 操作前需先把相關資料夾分享並加到相同帳戶下才不會出錯</strong></p>
<p>BTW, 在 macOS 安裝 iftop 發生了小問題, 解決紀錄於此: <a href="https://kywk.github.io/moco/posts/macos/macos_install-iftop/">macOS 安裝 iftop 失敗與解決方式 · moco</a></p>
<h2 id="see-also">See Also</h2>
<h3 id="rclone-configure-file">rclone configure file</h3>
<p>在 macOS, Linux 環境下, rclone 設置檔存放在 <code>$HOME/.config/rclone/rclone.conf</code>
我工作需在多台電腦中切換, 個人習慣把 .config 裡需在多台電腦同步的資料夾放在 Dropbox 上,
再建立對應 symbolic link.</p>
<pre><code>$ mkdir ~/Dropbox/config
$ mv ~/.config/rclone ~/Dropbox/config
$ ln -sfF ~/Dropbox/config/rclone .config/rclone
</code></pre><p>這樣無論在哪台電腦修改了什麼設定, 換個電腦仍可輕鬆同步設定.</p>
<h3 id="rclone-supported-cloud-drive">rclone supported cloud drive</h3>
<p>Rclone 所支援的雲端硬敵種類如下:</p>
<pre><code> 1 / 1Fichier
 2 / Alias for an existing remote
 3 / Amazon Drive
 4 / Amazon S3 Compliant Storage Provider (AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, Tencent COS, etc)
 5 / Backblaze B2
 6 / Box
 7 / Cache a remote
 8 / Citrix Sharefile
 9 / Dropbox
10 / Encrypt/Decrypt a remote
11 / FTP Connection
12 / Google Cloud Storage (this is not Google Drive)
13 / Google Drive
14 / Google Photos
15 / Hubic
16 / In memory object storage system.
17 / Jottacloud
18 / Koofr
19 / Local Disk
20 / Mail.ru Cloud
21 / Mega
22 / Microsoft Azure Blob Storage
23 / Microsoft OneDrive
24 / OpenDrive
25 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH)
26 / Pcloud
27 / Put.io
28 / QingCloud Object Storage
29 / SSH/SFTP Connection
30 / Sugarsync
31 / Tardigrade Decentralized Cloud Storage
32 / Transparently chunk/split large files
33 / Union merges the contents of several upstream fs
34 / Webdav
35 / Yandex Disk
36 / http Connection
37 / premiumize.me
38 / seafile
</code></pre><h3 id="reference">Reference</h3>
<ul>
<li><a href="https://wp.madjack.info/linux/rclone-googledrive-onedrive.html">Rclone:玩轉Google Drive &amp; One Drive - 消失的亞特蘭提斯</a></li>
<li><a href="https://caloskao.org/rclone-across-transfer-each-cloud-drive-without-local-machine-bandwidth/">Rclone 在不使用本機頻寬的條件下進行跨雲端硬碟傳輸 | Calos&rsquo;s Blog</a></li>
<li><a href="http://jdev.tw/blog/4746/rclone-cloud-storage-command-line">用rclone命令行指令簡化雲端儲存服務的各項檔案操作 | 簡睿隨筆 | 學習過程的紀錄與備忘</a></li>
<li><a href="t.ly/AWMh">GOOGLE Drive 相互複製 對拷. 前言 | by BunnyBit | Medium</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>macOS 安裝 iftop 失敗與解決方式</title>
            <link>https://kywk.github.io/moco/posts/2020/12/macos_install-iftop/</link>
            <pubDate>Mon, 07 Dec 2020 16:48:04 +0800</pubDate>
            
            <guid>https://kywk.github.io/moco/posts/2020/12/macos_install-iftop/</guid>
            <description>測試 Rclone 伺服機端傳輸時發覺 macOS 並無 iftop 指令, 習慣性地用 brew 安裝了.
$ brew install iftop ... ... iftop requires root privileges so you will need to run `sudo iftop`. You should be certain that you trust any software you grant root privileges. 安裝完成後提示 iftop 這個指令需要用 root 權限執行.
然而使用 sudo iftop 之後卻出現 command not found 的錯誤.
$sudo iftop sudo: iftop: command not found 上網查了查, 看到這篇 一次macbook安装iftop失败的经历及解决方式_偷懒的加菲-CSDN博客
跟著該文敘述一一確認後, 發覺我電腦上只存在著 sbin 不在 path 環境變數的問題.</description>
            <content type="html"><![CDATA[<p>測試 Rclone 伺服機端傳輸時發覺 macOS 並無 iftop 指令, 習慣性地用 brew 安裝了.</p>
<pre><code>$ brew install iftop
...
...
iftop requires root privileges so you will need to run `sudo iftop`.
You should be certain that you trust any software you grant root privileges.
</code></pre><p>安裝完成後提示 iftop 這個指令需要用 root 權限執行.</p>
<p>然而使用 sudo iftop 之後卻出現 command not found 的錯誤.</p>
<pre><code>$sudo iftop
sudo: iftop: command not found
</code></pre><p>上網查了查, 看到這篇 <a href="https://blog.csdn.net/hl449006540/article/details/86753227">一次macbook安装iftop失败的经历及解决方式_偷懒的加菲-CSDN博客</a><br>
跟著該文敘述一一確認後, 發覺我電腦上只存在著 sbin 不在 path 環境變數的問題.</p>
<pre><code>$ sudo vim /etc/paths
</code></pre><p>打開後發覺裡面有 <code>/usr/local/bin</code>, 但沒有 <code>/usr/local/sbin</code>.<br>
手動把 <code>/usr/local/sbin</code> 加入, 存檔, 重啟終端機.</p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3dGa69B3UVBKt_TYzNt4-nTxPn8WbSfDK1nVlQ7PXOXDIwwV9pQbliqr6_vH69TMj-FOUY26BG_CiFLDHo6pXTGOE6dtYMESpYQD-8jucaCbnZ3qObEMzdsFbm62I_Omdvzz-Q_unLNo2CVRxQPkyDsAw=w1208-h894-no?authuser=0" alt=""></p>
<p>成功.
紀錄之.</p>
]]></content>
        </item>
        
        <item>
            <title>Google Team Drive 無限空間申請</title>
            <link>https://kywk.github.io/moco/posts/2020/12/gd_team-drive-signup/</link>
            <pubDate>Mon, 07 Dec 2020 11:35:05 +0800</pubDate>
            
            <guid>https://kywk.github.io/moco/posts/2020/12/gd_team-drive-signup/</guid>
            <description>Google Drive 團隊硬碟 Google 針對商業和教育用戶推出了 Team Drive (團隊硬碟), 上傳到團隊硬碟中的檔案, 所有權屬於該團隊硬碟管理員和團隊管理員, 可解決員工離職後員工所存放的檔案失效的問題. 團隊硬碟也可以分享給團隊外的成員, 和外部廠商合作時可以讓廠商上傳檔案. 由於檔案所有權屬於管理員, 也可避免廠商擅自移除檔案.
Google Drive 團隊硬碟在線自助領取 目前團隊硬碟的容量為無限容量, 也未限制每個用戶能開設的團隊硬碟數量, 故有些企業或教育用戶管理員開放大眾使用該組織的團隊硬碟.
這樣的使用並不完全符合 Google 規範, 且管理員也有權隨時取消團隊硬碟. 使用前還是要先評估.
近來 Google 對於無限容量服務策略有不少調整, 無限空間可能隨時會被 Google 取消收回, 使用相關服務請三思. 可以拿來存放網路資源, 加密異地備份, 但避免存放個人重要資料.
系列文還在編寫的同時, 之前申請的某個團隊營碟就硬生生消失了. 別把重要資料放團隊碟, 多申請幾組, 設定備份才是使用團隊硬碟較為保險的方式.
下列申請網址隨時可能失效, 有些達到 API 單日上限, 隔日再試即可.
 無限次免費Google TeamDrive: https://td.fastio.me 英國老牌名校謝菲爾德大學團隊盤: https://gdrive.zppcw.cn  failed at 2020-12-17
 yesyesxx.me: https://gd.zxd.workers.dev/ 台灣中正大學團隊盤: https://gd.404edu.workers.dev/ 404 NOT FOUND團隊盤: http://leon.educationhost.cloud  Google Drive 團隊硬碟領取方式 發文時只剩第一組連結能成功申請, 以下說明以該服務為例, 其他連結申請方式大同小異.</description>
            <content type="html"><![CDATA[<h2 id="google-drive-團隊硬碟">Google Drive 團隊硬碟</h2>
<p>Google 針對商業和教育用戶推出了 Team Drive (團隊硬碟),
上傳到團隊硬碟中的檔案, 所有權屬於該團隊硬碟管理員和團隊管理員,
可解決員工離職後員工所存放的檔案失效的問題.
團隊硬碟也可以分享給團隊外的成員, 和外部廠商合作時可以讓廠商上傳檔案.
由於檔案所有權屬於管理員, 也可避免廠商擅自移除檔案.</p>
<h2 id="google-drive-團隊硬碟在線自助領取">Google Drive 團隊硬碟在線自助領取</h2>
<p>目前團隊硬碟的容量為無限容量, 也未限制每個用戶能開設的團隊硬碟數量,
故有些企業或教育用戶管理員開放大眾使用該組織的團隊硬碟.</p>
<p><strong>這樣的使用並不完全符合 Google 規範, 且管理員也有權隨時取消團隊硬碟. 使用前還是要先評估.</strong></p>
<p>近來 Google 對於無限容量服務策略有不少調整, 無限空間可能隨時會被 Google 取消收回, 使用相關服務請三思.
可以拿來存放網路資源, 加密異地備份, 但避免存放個人重要資料.</p>
<p><strong>系列文還在編寫的同時, 之前申請的某個團隊營碟就硬生生消失了.</strong>
<strong>別把重要資料放團隊碟, 多申請幾組, 設定備份才是使用團隊硬碟較為保險的方式.</strong></p>
<p><em>下列申請網址隨時可能失效, 有些達到 API 單日上限, 隔日再試即可.</em></p>
<ul>
<li>無限次免費Google TeamDrive: <a href="https://td.fastio.me">https://td.fastio.me</a></li>
<li>英國老牌名校謝菲爾德大學團隊盤: <a href="https://gdrive.zppcw.cn">https://gdrive.zppcw.cn</a></li>
</ul>
<p><em>failed at 2020-12-17</em></p>
<ul>
<li>yesyesxx.me: <a href="https://gd.zxd.workers.dev/">https://gd.zxd.workers.dev/</a></li>
<li>台灣中正大學團隊盤: <a href="https://gd.404edu.workers.dev/">https://gd.404edu.workers.dev/</a></li>
<li>404 NOT FOUND團隊盤: <a href="http://leon.educationhost.cloud">http://leon.educationhost.cloud</a></li>
</ul>
<h2 id="google-drive-團隊硬碟領取方式">Google Drive 團隊硬碟領取方式</h2>
<p>發文時只剩第一組連結能成功申請, 以下說明以該服務為例, 其他連結申請方式大同小異.</p>
<p>申請方式相當簡單, 僅需提供想創建的團隊硬碟名稱以及一組 GMail 即可.</p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3ducDNLej9_d4oGUoBSqOyMg0ow3SZE2ata_nVHjAM3Leq-JJbOAk_I4CR37NGuAAFVdDLW1cB_umiXPiN2CycbPHCJI_HLzKhrNKoQbL3lGyCS-ivjdI4zCLmjr3_vI9Aroq1zZzhQhDwLfBwdxgWL0g=w557-h637-no?authuser=0" alt=""></p>
<p><strong>再次強調, 這樣的使用並不完全符合 Google 規範, 建議使用小號申請該服務</strong></p>
<p>申請成功後即可在 Google Drive 裡共用雲端硬碟看到剛剛新增的團隊硬碟.</p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3f3uGznIhBHl6wx59Q-9Uw3-lKdZhkACvQ3lJ7V_jDuFgikirN1WLBoobSFPfhwR2vtLmfaxeOCTIKzGB6c93uH9eIoYGBN6_wk_eECrTH2Nu5amz6vsPeez0QjwiJQ_UHERMPQUiC13JhQhE3Si39Luw=w603-h730-no?authuser=0" alt=""></p>
<p>因為是用小號申請的, 使用時需切換帳號.<br>
若希望不切換帳號快速存取硬碟, 可透過管理成員, 把主要帳號加入團隊硬碟管理員.</p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3cCntHjbyEr94JMuqlB0GgTe2dZqSclbCnxOAtiWGT-dqN0XsX25gtv-TXTxs3ZeD6EGQNN2Z_9Owg_EGg5uiT6LO6HzkvEPA0W5vvPVZ0dDMGwltGY70cMf0dqZQOPiLIjSVs-8mF-0zR5OOIVX9GvFg=w694-h722-no?authuser=0" alt=""></p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3cqIiXDLMJiRwGZxgOk1YKqe8zLTPZN71U0JlaCEtT79PsIjT3DSwSR_RVQASOsoI4T9M-clemg5g2pOcxaIgSE_hxCZFQWKFLhEKRSUzN_Wd6SB8BgIc3bDWzI7ijarA391IrcHF1fqIWwsbjq1J6H9g=w652-h356-no?authuser=0" alt=""></p>
<p>這樣一來, 主帳號的共用雲端硬碟中就可看到剛剛新增的團隊硬碟, 方便直接使用主帳號來管理檔案.</p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3eGG1rB0uw5DD4qaNDlSYTVzISkevn8c7ImHyhkvpd8YQLnfyi7sNJ1ZiDPJGt54Nw3rFkWOgCBuJImhwyRVSRDwFFUZ58Nc79xeorNR66sBL4NFkNypuD0Xu4j-vYt61lo8HmoqSFf2LkoGdFDd7TE8g=w467-h307-no?authuser=0" alt=""></p>
<p>當然, 如果對帳號安全性比較敏感的, 不要關聯到主帳號比較妥當.<br>
畢竟生殺大權在 Google 手上, 誰也不敢保證未來的變化會如何.</p>
<p>且後續要介紹的 rclone / autorclone 用小號就可以進行操作, 無須使用主帳號.</p>
<h2 id="reference">Reference</h2>
<ul>
<li><a href="https://zh.vpnclub.cc/get-google-drive-unlimited-storage-plan/">Google Drive 雲端硬碟無限容量不用購買免費取得開通教學文 | 跳板俱樂部</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Porting Hexo tags to Hugo shortcode</title>
            <link>https://kywk.github.io/moco/posts/2020/10/porting-hexo-tags/</link>
            <pubDate>Sat, 24 Oct 2020 17:05:52 +0800</pubDate>
            
            <guid>https://kywk.github.io/moco/posts/2020/10/porting-hexo-tags/</guid>
            <description>Hexo 標籤 Hexo 標籤外掛是用於在文章中快速插入特定內容的外掛, 有幾種方式擴充:
  內建標籤:
Hexo 內建標籤有常用的 Block Quote, Gist, iframe, Youtube, &amp;hellip; 包含 Markdown 不支援但常用的 HTML 語法, 影音嵌入, 程式片斷嵌入&amp;hellip;等.
文章使用內建標籤的相容性最高, 不容易因更換主題而導致生成錯誤的情況. 但不同 Hexo 版本的內建標籤還是可能不同而發生相容性問題.
  標籤外掛:
Hexo 有強大的外掛系統, 能輕鬆擴展功能而不用修改核心模組的原始碼.
標籤亦可透過外掛擴充, 如何製作標籤外掛 官方有詳細說明.
Plugins | Hexo 是官方收集的外掛列表, hexo-tag 開頭為標籤外掛. 通常透過 npm install PACKAGE_NAME 來安裝外掛.
標籤外掛安裝在站台根目錄, 文章使用外掛的標籤和內建標籤一樣是不分主題皆可使用, 通常和 Hexo 版本無關, 不會因 Hexo 升版而出現相容問題.
  主題支援:
Hexo 主題可以提供該主題內建支援的標籤, 主題內透過外掛的方式提供擴充的標籤提供文章使用.
主題支援的標籤產生的網頁風格型態通常比較美觀. 但更換主題時可能會不支援的問題.
  Hugo shortcode Hugo shortcode 和 Hexo tags 很像, 也有內建 / 站台外掛 / 主題支援三種方式.</description>
            <content type="html"><![CDATA[<h2 id="hexo-標籤">Hexo 標籤</h2>
<p>Hexo 標籤外掛是用於在文章中快速插入特定內容的外掛, 有幾種方式擴充:</p>
<ol>
<li>
<p><strong>內建標籤:</strong><br>
Hexo <a href="(https://hexo.io/zh-tw/docs/tag-plugins)">內建標籤</a>有常用的 Block Quote, Gist, iframe, Youtube, &hellip;
包含 Markdown 不支援但常用的 HTML 語法, 影音嵌入, 程式片斷嵌入&hellip;等.</p>
<p>文章使用內建標籤的相容性最高, 不容易因更換主題而導致生成錯誤的情況.
但不同 Hexo 版本的內建標籤還是可能不同而發生相容性問題.</p>
</li>
<li>
<p><strong>標籤外掛:</strong><br>
Hexo 有強大的<a href="https://hexo.io/zh-tw/docs/plugins">外掛系統</a>, 能輕鬆擴展功能而不用修改核心模組的原始碼.<br>
標籤亦可透過外掛擴充, <a href="https://hexo.io/zh-tw/api/tag.html">如何製作標籤外掛</a> 官方有詳細說明.<br>
<a href="https://hexo.io/plugins/">Plugins | Hexo</a> 是官方收集的外掛列表, <code>hexo-tag</code> 開頭為標籤外掛.
通常透過 <code>npm install PACKAGE_NAME</code> 來安裝外掛.</p>
<p>標籤外掛安裝在站台根目錄, 文章使用外掛的標籤和內建標籤一樣是不分主題皆可使用,
通常和 Hexo 版本無關, 不會因 Hexo 升版而出現相容問題.</p>
</li>
<li>
<p><strong>主題支援:</strong><br>
Hexo 主題可以提供該主題內建支援的標籤, 主題內透過外掛的方式提供擴充的標籤提供文章使用.<br>
主題支援的標籤產生的網頁風格型態通常比較美觀. 但更換主題時可能會不支援的問題.</p>
</li>
</ol>
<h2 id="hugo-shortcode">Hugo shortcode</h2>
<p>Hugo shortcode 和 Hexo tags 很像, 也有<a href="https://gohugo.io/content-management/shortcodes/">內建</a> / 站台外掛 / 主題支援三種方式.
官方有編寫 shortcode 教學 - <a href="https://gohugo.io/templates/shortcode-templates/">Create Your Own Shortcodes | Hugo</a>.</p>
<p>而 Hugo 安裝 shortcode 站台外掛比 Hexo 簡單些, 把相關檔案放在站台 <code>layouts/shortcodes</code> 即可,
不像 Hexo 需透過 <code>npm install package</code>.</p>
<h2 id="kywkhugo-shortcodeshttpsgithubcomkywkhugo-shortcodes"><a href="https://github.com/kywk/hugo-shortcodes">kywk/hugo-shortcodes</a></h2>
<p>一些 Hexo 內建或常見的 Tag 移植到 Hugo shortcodes 的收集.</p>
<h3 id="block-quote">Block Quote</h3>
<p>在文章中插入引言，可包含作者、來源和標題。</p>
<ul>
<li>
<p>Normal quote:</p>
<pre><code>{{&lt; blockquote &gt;}}
  This is a simple quote.
{{&lt; /blockquote &gt;}}
</code></pre>










  





  


<blockquote>
  <p><pre><code>  This is a simple quote.
</code></pre>
</p>
  <footer>
    <strong></strong>
    
      
        
      
    
  </footer>
</blockquote>

</li>
<li>
<p>Quote with author</p>
<pre><code>{{&lt; blockquote author=&quot;Author2&quot; &gt;}}
  This is a quote with only an Author named Author2.
{{&lt; /blockquote &gt;}}
</code></pre>










  
  
  
  





  


<blockquote>
  <p><pre><code>  This is a quote with only an Author named Author2.
</code></pre>
</p>
  <footer>
    <strong>Author2</strong>
    
      
        
      
    
  </footer>
</blockquote>

</li>
<li>
<p>Quote with author and source</p>
<pre><code>{{&lt; blockquote author=&quot;Author3&quot; source=&quot;Source&quot; &gt;}}
  This is a quote from Author3 and source &quot;source.&quot;
{{&lt; /blockquote &gt;}}
</code></pre>










  
  
  
  





  


<blockquote>
  <p><pre><code>  This is a quote from Author3 and source &quot;source.&quot;
</code></pre>
</p>
  <footer>
    <strong>Author3</strong>
    
      <cite>Source</cite>
    
  </footer>
</blockquote>

</li>
<li>
<p>Quote with author and link</p>
<pre><code>{{&lt; blockquote author=&quot;Author4&quot; link=&quot;https://www.google.com&quot; &gt;}}
  This is a quote from Author4 and links to https://www.google.com.
{{&lt; /blockquote &gt;}}
</code></pre>










  
  
  
  





      
      
      
    
     
      
    
    

    
    
  


<blockquote>
  <p><pre><code>  This is a quote from Author4 and links to https://www.google.com.
</code></pre>
</p>
  <footer>
    <strong>Author4</strong>
    
      
        <cite>
          <a href="https://www.google.com" title="https://www.google.com" rel="noopener noreferrer">google.com</a> 
        </cite>
      
    
  </footer>
</blockquote>

</li>
<li>
<p>Quote with author, link and title</p>
<pre><code>{{&lt; blockquote author=&quot;Author5&quot; link=&quot;https://www.google.com&quot; title=&quot;Google&quot; &gt;}}
  This is a quote from Author5 and links to https://www.google.com with title &quot;Google.&quot;
{{&lt; /blockquote &gt;}}
</code></pre>










  
  
  
  





  


<blockquote>
  <p><pre><code>  This is a quote from Author5 and links to https://www.google.com with title &quot;Google.&quot;
</code></pre>
</p>
  <footer>
    <strong>Author5</strong>
    
      
        <cite>
          <a href="https://www.google.com" title="https://www.google.com" rel="noopener noreferrer">Google</a> 
        </cite>
      
    
  </footer>
</blockquote>

</li>
<li>
<p>Quote with author and a link longer than 32 characters, string is first cut at 32 characters then everything after the last forward slash is removed</p>
<pre><code>{{&lt; blockquote author=&quot;Author6&quot; link=&quot;https://twitter.com/CryptoGangsta/status/716427930126196737&quot; &gt;}}
  This is a quote from Author5 and links to https://twitter.com/CryptoGangsta/status/716427930126196737 which is longer than 32 characters.
  &lt;br&gt;And this is a new line in the quote with the HTML br tag.
{{&lt; /blockquote &gt;}}
</code></pre>










  
  
  
  





      
      
      
    
     
      
    
    

    
    
         
         
         

         
        
        
        
        
      
      
    
  


<blockquote>
  <p><pre><code>  This is a quote from Author5 and links to https://twitter.com/CryptoGangsta/status/716427930126196737 which is longer than 32 characters.
  &lt;br&gt;And this is a new line in the quote with the HTML br tag.
</code></pre>
</p>
  <footer>
    <strong>Author6</strong>
    
      
        <cite>
          <a href="https://twitter.com/CryptoGangsta/status/716427930126196737" title="https://twitter.com/CryptoGangsta/status/716427930126196737" rel="noopener noreferrer">twitter.com/CryptoGangsta/...</a> 
        </cite>
      
    
  </footer>
</blockquote>

</li>
<li>
<p>Test from the Octopress blockquote page at: <a href="http://octopress.org/docs/plugins/blockquote/">http://octopress.org/docs/plugins/blockquote/</a></p>
<pre><code>{{&lt; blockquote author=&quot;@allanbranch&quot; link=&quot;https://twitter.com/allanbranch/status/90766146063712256&quot; &gt;}}
  Over the past 24 hours I've been reflecting on my life &amp; I've realized only one thing. I need a medieval battle axe.
{{&lt; /blockquote &gt;}}
</code></pre>










  
  
  
  





      
      
      
    
     
      
    
    

    
    
         
         
         

         
        
        
        
        
        
        
      
      
    
  


<blockquote>
  <p><pre><code>  Over the past 24 hours I've been reflecting on my life &amp; I've realized only one thing. I need a medieval battle axe.
</code></pre>
</p>
  <footer>
    <strong>@allanbranch</strong>
    
      
        <cite>
          <a href="https://twitter.com/allanbranch/status/90766146063712256" title="https://twitter.com/allanbranch/status/90766146063712256" rel="noopener noreferrer">twitter.com/allanbranch/status/...</a> 
        </cite>
      
    
  </footer>
</blockquote>

</li>
</ul>
<p><em>2020.10.24 Hexo blockquote 參數部分陸續補齊</em></p>
<h3 id="obsidian-invisible-block">Obsidian (Invisible Block)</h3>
<p>如<a href="https://kywk.github.io/moco/posts/hugo/from-hexo-to-hugo/">從 Hexo 到 Hugo</a>
中所提及的, 我的 blog 資料夾是放在 Obsidian Vault 中,
為了可以正常使用 Obsidian 標籤, 區塊連結, 反向連結等功能, 文章中穿插了不少 Obsidian 的語法.
這些語法雖不會造成 Hugo 錯誤, 但部落格文章中有奇怪的語法總是怪.</p>
<p>做了個 Obsidian shortcode, 區塊內容將放在 <code>display:disable</code> 的 div block 中.
只要把 Obsidian 的語法標示放在 Obsidian 區塊中,
既可享受 Obsidian 帶來的便利功能, 也不影響部落格的閱讀.</p>
<pre><code>{{&lt; obsidian &gt;}}
  Obsidian tag, link, block id, ... etc here.
{{&lt; /obsidian &gt;}}
</code></pre><div style="display:none">
  
  Obsidian tag, link, block id, ... etc here.

</div>

]]></content>
        </item>
        
        <item>
            <title>從 Hexo 到 Hugo</title>
            <link>https://kywk.github.io/moco/posts/2020/10/from-hexo-to-hugo/</link>
            <pubDate>Wed, 14 Oct 2020 15:08:05 +0800</pubDate>
            
            <guid>https://kywk.github.io/moco/posts/2020/10/from-hexo-to-hugo/</guid>
            <description>本文以 Hugo v0.76.2 編寫介紹, 其他版本若步驟或訊息內容不符, 請以官方文件為準
從 Hexo 到 Hugo 沒想過會再次開始寫 Blog, 多事的 2020 太多意外, 覺得需要即時一一進行想做的事.
於是重新開始了 Blog, 把想做的事完成, 紀錄, 然後放水流, 繼續&amp;hellip;
雖一直使用 Hexo, 但脫節的這些年 Hexo 改了不少. 繼續沿用 Hexo 還是換個平台重新來過, 評估了許久.
之前使用自行修改過後的 Hexi, 和 Hexo 已越來越不相容, 偶爾升版都需解決衝突.
用 從 Hexo 到 Hugo 餵狗, 多數人棄坑 Hexo 原因多為效能落差大, 及轉移無痛.
這些文章中, 個人心路歷程則和 从 Hexo 到 Hugo - ouuan的博客 較為接近.
自己工作上的開發也漸漸從 node.js 轉移到 go lang, 部落格平台轉移似乎天注定.
建制環境 官方有提供如何安裝及設定 Hugo 的說明文件, 網路上也找得到中文版文件.
使用Hugo+Github Pages建置Blog 這篇寫得挺詳細, 部分內容架構會參考該文, 再以自己的歷程增減補充.</description>
            <content type="html"><![CDATA[<p><em>本文以 Hugo v0.76.2 編寫介紹, 其他版本若步驟或訊息內容不符, 請以官方文件為準</em></p>
<h2 id="從-hexo-到-hugo">從 Hexo 到 Hugo</h2>
<p>沒想過會再次開始寫 Blog, 多事的 2020 太多意外, 覺得需要即時一一進行想做的事.<br>
於是重新開始了 Blog, 把想做的事完成, 紀錄, 然後放水流, 繼續&hellip;</p>
<p>雖一直使用 Hexo, 但脫節的這些年 Hexo 改了不少.
繼續沿用 Hexo 還是換個平台重新來過, 評估了許久.<br>
之前使用自行修改過後的 Hexi, 和 Hexo 已越來越不相容, 偶爾升版都需解決衝突.</p>
<p>用 <a href="https://www.google.com/search?sxsrf=ALeKk032kFJ5VuvMawA5Inq9zUmrYJtn3Q%3A1602060011667&amp;ei=6359X8GUKOSbmAWh8oewDQ&amp;q=%E5%BE%9E+hexo+%E5%88%B0%C2%A0hugo&amp;oq=%E5%BE%9E+hexo+%E5%88%B0%C2%A0hugo&amp;gs_lcp=CgZwc3ktYWIQAzoECCMQJzoHCCMQsAIQJzoFCCEQoAFQi3hYnrcBYIu5AWgEcAB4AYABhAGIAbkMkgEEMjIuMpgBAKABAaoBB2d3cy13aXrAAQE&amp;sclient=psy-ab&amp;ved=0ahUKEwiBtp3PiqLsAhXkDaYKHSH5AdYQ4dUDCA0&amp;uact=5">從 Hexo 到 Hugo</a> 餵狗,
多數人棄坑 Hexo 原因多為效能落差大, 及轉移無痛.<br>
這些文章中, 個人心路歷程則和 <a href="https://ouuan.github.io/post/from-hexo-to-hugo/">从 Hexo 到 Hugo - ouuan的博客</a> 較為接近.<br>
自己工作上的開發也漸漸從 node.js 轉移到 go lang, 部落格平台轉移似乎天注定.</p>
<h2 id="建制環境">建制環境</h2>
<p>官方有提供如何安裝及設定 Hugo 的<a href="https://gohugo.io/getting-started/installing/">說明文件</a>,
網路上也找得到<a href="https://www.gohugo.org/doc/overview/installing/">中文版文件</a>.<br>
<a href="https://carrie-lai.github.io/post/createhugoblog/">使用Hugo+Github Pages建置Blog</a> 這篇寫得挺詳細,
部分內容架構會參考該文, 再以自己的歷程增減補充.</p>
<h3 id="安裝-hugo">安裝 Hugo</h3>
<p>對於 Mac 開發者來說, <a href="https://brew.sh/">Homebrew</a> 該是再熟悉不過的工具.
Hugo 有提供 brew 套件, 相當方便的安裝方式.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install hugo
</code></pre></div><p>安裝完後可透過 <code>hugo version</code> 確認版本, 若安裝失敗應該會出現 <code>command not found</code> 的錯誤訊息.
若可顯示 Hugo 版本資訊則安裝成功</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew version
Hugo Static Site Generator v0.76.2/extended darwin/amd64 BuildDate: unknown
</code></pre></div><p>若透過 brew 安裝的版本不是想要的版本, 也可以自行下載特定版本手動安裝.<br>
梅干有教學: <a href="https://www.minwt.com/webdesign-dev/html/21603.html">MAC平台環境中，下載所需的Hugo版本與手動安裝 | 梅問題．教學網</a></p>
<h3 id="初始化-blog">初始化 Blog</h3>
<p>找個地方當作是存放 Blog 的資料夾, 下指令 <code>hugo new site 目標資料夾路徑</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ hugo new site test
Congratulations! Your new Hugo site is created in /Users/kywk/Downloads/test.

Just a few more steps and you<span style="color:#960050;background-color:#1e0010">&#39;</span>re ready to go:

1. Download a theme into the same-named folder.
   Choose a theme from https://themes.gohugo.io/ or
   create your own with the <span style="color:#e6db74">&#34;hugo new theme &lt;THEMENAME&gt;&#34;</span> command.
2. Perhaps you want to add some content. You can add single files
   with <span style="color:#e6db74">&#34;hugo new &lt;SECTIONNAME&gt;/&lt;FILENAME&gt;.&lt;FORMAT&gt;&#34;</span>.
3. Start the built-in live server via <span style="color:#e6db74">&#34;hugo server&#34;</span>.

Visit https://gohugo.io/ <span style="color:#66d9ef">for</span> quickstart guide and full documentation.
</code></pre></div><p>成功的話會看到上述訊息 (依版本不同訊息內容或許不同)<br>
在 Blog 資料夾也會看到預設得資料結構</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cd test/
$ ls
archetypes  config.toml content     data        layouts     static      themes
</code></pre></div><h3 id="選用-theme">選用 theme</h3>
<p>主題可以到 <a href="https://themes.gohugo.io/">Hugo Themes</a> 去找自己喜歡的來用, 都有預覽可以看.</p>
<p>官方教學 <a href="https://gohugo.io/getting-started/quick-start/">Quick Start | Hugo</a> 是建議使用 git submodule 來安裝與追蹤主題更新,
不過我並沒有打算為部落格建立 git 版控, 所以直接把喜歡的主題 clone 到 themes 資料夾底下.</p>
<p>這個部落格用的是 <a href="https://themes.gohugo.io/hugo-coder/">coder</a>, 指令如下:</p>
<pre><code>$ cd themes
$ git clone https://github.com/luizdepra/hugo-coder.git
</code></pre><p>不同主題會有不同主題的配置內容, 主題的說明文件上應該都會說明設定方式, 詳閱並耐心修改.
大部分 Hugo 主題都會有 <code>exampleSite</code> 資料夾, 是個參考修改的入口.</p>
<h2 id="搬移-hexo-文件">搬移 hexo 文件</h2>
<p>以下說明 Hexo 和 Hugo 設計思維不同之處, 並簡單介紹搬移 Hexo 到 Hugo 注意事項.</p>
<h3 id="檔案資料夾">檔案資料夾</h3>
<p>Hugo 文章則放在 <code>content</code> 資料夾, 直接把 Hexo 站台 <code>source/_post</code> 的檔案直接複製到 Hugo 的 <code>content</code> 即可.</p>
<p>自己目前是使用 <a href="https://obsidian.md/">Obsidian</a> 作為筆記管理系統, 部落格文章也都存放在 Obsidian 資料倉儲內.
所幸 UNIXlike 檔案系統的支援, 可以直接建立 Symbolic link, 把 Obsidian 資料夾下的部落格文章 link 到 Hugo 站台.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cd hugo-site/content
$ ln -sfF ~/Documents/Obsidian/blog blog
</code></pre></div><p>這樣一來, 我可以使用 Obsidian 來管理部落格文章, 並使用 Hugo 來發佈部落格.</p>
<h3 id="草稿">草稿</h3>
<p>hexo 把放在 <code>source/_draft</code> 的文章視為草稿, 發佈時不會產生該資料夾下的文章.<br>
hugo 則是以文章 Front Matter 中的 <code>draft</code> 屬性判斷該篇文章是否為草稿, 預設為非草稿.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-markdown" data-lang="markdown">---
title: &#34;從 hexo 到 hugo&#34;
date: 2020-10-06T15:08:05+08:00
draft: true
...
---
</code></pre></div><p>兩者設計各有優缺, 個人喜歡 hugo 的方式,
文章編輯完直接改設定再發佈即可, 不需要搬移檔案, 操作比較直觀.</p>
<h3 id="front-matter">Front Matter</h3>
<p>hexo 對 Front Matter 寬容度較高, 不一定要包在兩個 <code>---</code> 之間, 甚至可以不需要 <code>---</code>.<br>
而 hugo 的 Front Matter 則必須包含在 <code>---</code> 之間, 否則會出錯.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-markdown" data-lang="markdown">---
title: &#34;從 hexo 到 hugo&#34;
date: 2020-10-06T15:08:05+08:00
categories: [&#34;hugo&#34;]
tags: [&#34;hugo&#34;, &#34;tutorial&#34;]
---
</code></pre></div><p>這部份需一一確認文章修改, 或是自行透過熟悉的工具批次比對後修正.</p>
<h3 id="tag--shortcodes">Tag &amp; shortcodes</h3>
<p>使用 Markdown 寫文章好處是相容性較高, 使用常見格式在文章主體幾乎都可以不需修改, 直接產生.
但各個 Blog 系統還是有各自的擴充格式, 這部份可能必須手動一一確認修正.
或參考 <a href="https://gohugo.io/tools/migrations/">官方 Migrate to Hugo</a> 裡面一些轉換工具的介紹.</p>
<p>Hexo Tag plugin 擴充指令對應到的是 Hugo shortcodes, 都是可以透過簡單指令來插入複雜格式的方法.
格式上 Hexo 的擴充 Tag 格式和 Jekyll 一樣, 格式為 <code>{% tag_name %}</code>,
而 Hugo shortcodes 格式則為 <code>{ {&lt; shortcode_name &gt;} }</code></p>
<p>格式轉換上可使用 <a href="https://github.com/coderzh/ConvertToHugo">ConvertToHugo</a> 來轉換,
若有 Hugo 或選用的主題所沒有的 shortcode, 只能自己手動處理.
官網有 <a href="https://gohugo.io/content-management/shortcodes/">Shortcodes</a> 的完整介紹與編寫範例.
一些常用的 shortcode 也容易在網路上找到範例.
把自行編寫或網路下載的 shortcodes 放在 <code>layouts/shortcodes</code> 即可.</p>
<p><a href="https://github.com/kywk/hugo-shortcodes">kywk/hugo-shortcodes</a> 這專案是個人使用的 shortcodes, 會陸續把 Hexo 內建的 Tag 都移植到 Hugo shortcodes.</p>
<h2 id="預覽">預覽</h2>
<ul>
<li>
<p>本地預覽</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ hugo server
</code></pre></div><p><img src="https://lh3.googleusercontent.com/pw/ACtC-3eU2qvxANnWdmA058HjT6_iu-EPvodcn2aG2wPm64F72SZl7-Z41ZbcZkzKmshLIsettRm0GImbyIvRNeOQlXqYX5T38DUHinH1fEZI8MVSoZ3A3Om7o-cWvlxJOzZkA0nD1TjaCYmgaWdi-S1b0ftLOw=w559-h307-no?authuser=0" alt=""></p>
<p>會產生靜態頁面並產生預覽內容, 可以在瀏覽器經由 http://localhost:1313/ 查看,
且支援熱部署 (livereload), 修改文章或是 CSS 之類的東西時是不用重啟的.</p>
<p>若檢視部落格內容無誤, 即可產生靜態頁面.</p>
</li>
<li>
<p>產生靜態頁面: 在根目錄下指令</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ hugo
</code></pre></div><p><img src="https://lh3.googleusercontent.com/pw/ACtC-3f6yJMe20dD8OCd3i7lPL30DC16KZ0xS49mlXtMUIZ-BKqlE7gQFBClXb1RT2l9Rptcb_6QjzztyFsC8tqb5oscP8bFTs0WYhqL2cmOTlSeENKW0RnhOfCdst2TuAZUHA6xLkxbj9qEyuLX88vM-hVnUg=w219-h209-no?authuser=0" alt=""></p>
<p>所生成的部落格靜態頁面放在 <code>public</code> 資料夾下, 可以直接上傳發佈.</p>
</li>
</ul>
<h2 id="發佈到-githubio">發佈到 github.io</h2>
<p>Hugo 沒有像 Hexo 內建 deploy 的指令, 需自行把檔案上傳網站空間.</p>
<p>我使用 <a href="https://pages.github.com/">GitHub Pages</a> 來放置個人網站.<br>
以下說明假設對 git/GitHub 已有一定程度熟悉, 關於 git 如何安裝, 相關指令細節不介紹.</p>
<h3 id="建立-githubio-repository">建立 github.io repository</h3>
<p>GitHub Pages 可以建立個人網站或專案網站,
基本設置發布流程皆相同, 差別在於 respository 名稱和預設 branch 不同.
詳盡的說明與步驟在 <a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/creating-a-github-pages-site">Creating a GitHub Pages site - GitHub Docs</a></p>
<p><strong>個人網站</strong></p>
<p>個人網站的網址為 <code>https://username.github.io</code>.</p>
<p>大部分相關 Hugo 教學文章都是使用個人網站來介紹, 文章資源相當多.
設定步驟亦相當簡單, 在 GitHub 上新建一個 <code>username.github.io</code> 的專案,
將該專案 clone 到 Hugo 站台資料夾內, 並改名為 public 即可.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cd $hugo
$ git clone https://github.com/username/username.github.io public
</code></pre></div><p><strong>專案網站</strong></p>
<p>GitHub 允許使用者為每個專案建置該專案網站, 網址為 <code>https://username.github.io/project</code>.</p>
<p>GitHub Pages 專案網站預設是使用專案倉儲中的 <code>gh-pages</code> 分支.
直接在既有的的專案中, 新增 <code>gh-pages</code> branch 即可.</p>
<p>若想使用其他分支當作網站資料, 可到 GitHub 上去指定 GitHub Pages 所要使用的 branch 名稱和資料夾.</p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3eDlmDBVj0CEUuHX1_JPkrxo1Tf_b6UDrFPEu1yWPA6HBhd86DqdS0D8h9aT44Hlgl2C6lztM0ngPo2OihyWatPbNFw-qT7wHyR4NEMDSPN9v6Hktt8va0YeQmvA-kJiMTB3XQ9E-dvTZu_awgnQX-cFg=w589-h277-no?authuser=0" alt=""></p>
<h3 id="發布-script">發布 script</h3>
<p>Hugo 生成的靜態網站文件存放在 <code>public</code> 資料夾,
把該資料夾內所有檔案加入 git, 並 push 到 GitHub 就完成發佈了.</p>
<p>寫了簡單的 script 來完成上述發佈動作.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo
cd public
git add .
git commit -m <span style="color:#e6db74">&#34;Updated: `date +&#39;%Y-%m-%d %H:%M:%S&#39;`&#34;</span>
git push -f
cd ..
</code></pre></div><h2 id="後記">後記</h2>
<p>除了使用 Hugo 重新開始部落格外, 預計完成兩個 Hugo 主題開發: <strong>fuday</strong> 及 <strong>rholi</strong>.<br>
及, 可能的話, 寫個 hexo2hugo 或 hexo2netlify 的主題轉換產生器.</p>
<p>開發歷程筆記和紀錄會整理更新在本部落格, 完成的發表亦然.<br>
回到寫 blog 的生活, 有種充實感, 比較有目標完成某件事.</p>
]]></content>
        </item>
        
    </channel>
</rss>
